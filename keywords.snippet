<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>class</Title>
			<Shortcut>class</Shortcut>
			<Description>Code snippet for class</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Class name</ToolTip>
					<Default>Class</Default>
				</Literal>
				<Literal>
					<ID>baseClass</ID>
					<ToolTip>Class name of baseClass</ToolTip>
					<Default>BaseClass</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[class $name$ : public $baseClass$
{
public:
	$name$();
	virtual ~$name$();

private:
	$selected$ $end$
};

$name$::$name$()
{
}

$name$::~$name$()
{
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>baseclass</Title>
			<Shortcut>baseclass</Shortcut>
			<Description>Code snippet for class</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Class name</ToolTip>
					<Default>BaseClass</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[class $name$
{
public:
	$name$();
	virtual ~$name$();

private:
	$selected$ $end$
};

$name$::$name$()
{
}

$name$::~$name$()
{
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>classi</Title>
			<Shortcut>classi</Shortcut>
			<Description>Code snippet for class with inline constructor/destructor</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Class name</ToolTip>
					<Default>Class</Default>
				</Literal>
				<Literal>
					<ID>baseClass</ID>
					<ToolTip>Class name of baseClass</ToolTip>
					<Default>BaseClass</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[class $name$ : public $baseClass$
{
public:
	$name$()
	{
	}
	
	virtual ~$name$()
	{
	}

private:
	$selected$ $end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>baseclassi</Title>
			<Shortcut>baseclassi</Shortcut>
			<Description>Code snippet for class with inline constructor/destructor</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Class name</ToolTip>
					<Default>BaseClass</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[class $name$
{
public:
	$name$()
	{
	}
	
	virtual ~$name$()
	{
	}

private:
	$selected$ $end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>enum</Title>
			<Shortcut>enum</Shortcut>
			<Description>Code snippet for enum</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Enum name</ToolTip>
					<Default>Enum</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[enum $name$
{
	$selected$ $end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>enum class</Title>
			<Shortcut>enumclass</Shortcut>
			<Description>Code snippet for enum class</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Enum class name</ToolTip>
					<Default>EnumClass</Default>
				</Literal>
				<Literal>
					<ID>type</ID>
					<ToolTip>Enum class type</ToolTip>
					<Default>int</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[enum class $name$ : $type$
{
	$selected$ $end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>struct</Title>
			<Shortcut>struct</Shortcut>
			<Description>Code snippet for struct</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Struct name</ToolTip>
					<Default>Struct</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[struct $name$
{
	$end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>structSurround</Title>
			<Shortcut>structs</Shortcut>
			<Description>Code snippet for struct</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Struct name</ToolTip>
					<Default>Struct</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[struct $name$
{
	$selected$ $end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>union</Title>
			<Shortcut>union</Shortcut>
			<Description>Code snippet for union</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Union name</ToolTip>
					<Default>Union</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[union $name$
{
	$selected$ $end$
};
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>namespace</Title>
			<Shortcut>namespace</Shortcut>
			<Description>Code snippet for namespace</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
                <SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Namespace name</ToolTip>
					<Default>name</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[namespace $name$
{
	$selected$ $end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>for</Title>
			<Shortcut>for</Shortcut>
			<Description>Code snippet for 'for' loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>size_t</Default>
					<ToolTip>Control variable type</ToolTip>
				</Literal>
				<Literal>
					<ID>index</ID>
					<Default>i</Default>
					<ToolTip>Index</ToolTip>
				</Literal>
				<Literal>
					<ID>max</ID>
					<Default>length</Default>
					<ToolTip>Max length</ToolTip>
				</Literal>
				<Literal>
					<ID>forBlock</ID>
					<Default>// to do</Default>
					<ToolTip>Block of 'for'</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[for ($type$ $index$ = 0; $index$ < $max$; $index$++)
{
	$forBlock$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>forSurround</Title>
			<Shortcut>fors</Shortcut>
			<Description>Code snippet for 'for' loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>size_t</Default>
					<ToolTip>Control variable type</ToolTip>
				</Literal>
				<Literal>
					<ID>index</ID>
					<Default>i</Default>
					<ToolTip>Index</ToolTip>
				</Literal>
				<Literal>
					<ID>max</ID>
					<Default>length</Default>
					<ToolTip>Max length</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[for ($type$ $index$ = 0; $index$ < $max$; $index$++)
{
	$selected$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>forr</Title>
			<Shortcut>forr</Shortcut>
			<Description>Code snippet for reverse 'for' loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>index</ID>
					<Default>i</Default>
					<ToolTip>Index</ToolTip>
				</Literal>
				<Literal>
					<ID>max</ID>
					<Default>length</Default>
					<ToolTip>Max length</ToolTip>
				</Literal>
				<Literal>
					<ID>forBlock</ID>
					<Default>// to do</Default>
					<ToolTip>Block of 'for'</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[for (int $index$ = $max$ - 1; $index$ >= 0 ; $index$--)
{
	$forBlock$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>forrSurround</Title>
			<Shortcut>forrs</Shortcut>
			<Description>Code snippet for reverse 'for' loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>index</ID>
					<Default>i</Default>
					<ToolTip>Index</ToolTip>
				</Literal>
				<Literal>
					<ID>max</ID>
					<Default>length</Default>
					<ToolTip>Max length</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[for (int $index$ = $max$ - 1; $index$ >= 0 ; $index$--)
{
	$selected$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>if</Title>
			<Shortcut>if</Shortcut>
			<Description>Code snippet for if statement</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>true</Default>
				</Literal>
				<Literal>
					<ID>ifBlock</ID>
					<ToolTip>Block of 'if'</ToolTip>
					<Default>// to do</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[if ($expression$)
{
	$ifBlock$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>ifSurround</Title>
			<Shortcut>ifs</Shortcut>
			<Description>Code snippet for if statement</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>true</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[if ($expression$)
{
	$selected$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>else</Title>
			<Shortcut>else</Shortcut>
			<Description>Code snippet for 'else' statement</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="cpp"><![CDATA[else
{
	$selected$ $end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>else if</Title>
			<Shortcut>elif</Shortcut>
			<Description>Code snippet for 'else if' statement</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
				<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>false</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[else if($expression$)
{
	$selected$ $end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>if else</Title>
			<Shortcut>ifelse</Shortcut>
			<Description>Code snippet for if...else statement</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>true</Default>
				</Literal>
				<Literal>
					<ID>ifBlock</ID>
					<ToolTip>Block of 'if'</ToolTip>
					<Default>// to do</Default>
				</Literal>
				<Literal>
					<ID>elseBlock</ID>
					<ToolTip>Block of 'else'</ToolTip>
					<Default>// to do</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[if ($expression$)
{
	$ifBlock$
}
else
{
	$elseBlock$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>rfor</Title>
			<Shortcut>rfor</Shortcut>
			<Description>Code snippet for 'range-based for' loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>variable</ID>
					<Default>i</Default>
					<ToolTip>Variable</ToolTip>
				</Literal>
				<Literal>
					<ID>range</ID>
					<Default>v</Default>
					<ToolTip>Range</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[for (auto& $variable$ : $range$)
{
    $selected$ $end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>rcfor</Title>
			<Shortcut>rcfor</Shortcut>
			<Description>Code snippet for 'const range-based for' loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>variable</ID>
					<Default>i</Default>
					<ToolTip>Variable</ToolTip>
				</Literal>
				<Literal>
					<ID>range</ID>
					<Default>v</Default>
					<ToolTip>Range</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[for (const auto& $variable$ : $range$)
{
	$selected$ $end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>do</Title>
			<Shortcut>do</Shortcut>
			<Description>Code snippet for do...while loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>false</Default>
				</Literal>
				<Literal>
					<ID>doBlock</ID>
					<ToolTip>Block of 'do'</ToolTip>
					<Default>// to do</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[do
{
	$doBlock$
} while ($expression$);
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>doSurround</Title>
			<Shortcut>dos</Shortcut>
			<Description>Code snippet for do...while loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>false</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[do
{
	$selected$
} while ($expression$);
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>while</Title>
			<Shortcut>while</Shortcut>
			<Description>Code snippet for while loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>true</Default>
				</Literal>
				<Literal>
					<ID>whileBlock</ID>
					<ToolTip>Block of 'while'</ToolTip>
					<Default>// to do</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[while ($expression$)
{
	$whileBlock$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>whileSurround</Title>
			<Shortcut>whiles</Shortcut>
			<Description>Code snippet for while loop</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to evaluate</ToolTip>
					<Default>true</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[while ($expression$)
{
	$selected$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>switch</Title>
			<Shortcut>switch</Shortcut>
			<Description>Code snippet for switch statement</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Expression to switch on</ToolTip>
					<Default>switch_on</Default>
				</Literal>
				<Literal Editable="false">
					<ID>cases</ID>
					<Function>GenerateSwitchCases($expression$)</Function>
					<Default><![CDATA[default:
	break;]]>
					</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[switch ($expression$)
{
	$end$
	$cases$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>try</Title>
			<Shortcut>try</Shortcut>
			<Description>Code snippet for try catch</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>try</ID>
					<ToolTip>Block of try</ToolTip>
					<Default>// to do</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[try
{
	$try$
}
catch (const std::exception& e)
{
	$end$
}
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>trySurround</Title>
			<Shortcut>trys</Shortcut>
			<Description>Code snippet for try catch</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>catch</ID>
					<ToolTip>Block of catch</ToolTip>
					<Default>// to do</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[try
{
	$selected$
}
catch (const std::exception& e)
{
	$catch$
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>#if</Title>
			<Shortcut>#if</Shortcut>
			<Description>Code snippet for #if</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Preprocessor expression to evaluate</ToolTip>
					<Default>0</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[#if $expression$
$selected$ $end$ 
#endif // $expression$
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>#ifdef</Title>
			<Shortcut>#ifdef</Shortcut>
			<Description>Code snippet for #ifdef</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Preprocessor expression to evaluate</ToolTip>
					<Default>DEBUG</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[#ifdef $expression$
$selected$ $end$ 
#endif // $expression$
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>#ifndef</Title>
			<Shortcut>#ifndef</Shortcut>
			<Description>Code snippet for #ifndef</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>expression</ID>
					<ToolTip>Preprocessor expression to evaluate</ToolTip>
					<Default>DEBUG</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[#ifndef $expression$
$selected$ $end$ 
#endif // !$expression$
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>#region</Title>
			<Shortcut>#region</Shortcut>
			<Description>Code snippet for #region</Description>
			<Author>Joshion Way</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Region name</ToolTip>
					<Default>MyRegion</Default>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[#pragma region $name$
$selected$ $end$ 
#pragma endregion
]]>
			</Code>
		</Snippet>
	</CodeSnippet>

</CodeSnippets>